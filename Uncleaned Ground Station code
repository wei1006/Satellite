#include <Wire.h>
#include <LCDi2cR.h>
#include <XBee.h>
#include <math.h>

#define TMP102 0x48

//Joystick variables
int joystickX;
int joystickY;
int joystickButton;
int joystickHorizontal = 0;
int joystickVertical = 1;
int stateX = 1;
int stateY = 1;

//LCD variables
LCDi2cR lcd = LCDi2cR(4, 20, 0x63, 0);
uint8_t rows = 4;
uint8_t cols = 20;

//Xbee send details
XBee xbee               = XBee();
uint8_t payload[4] = {0};
int Xbee = 0;

// SH + SL Address of receiving XBee                             // Remote XBee    
XBeeAddress64 addr64 = XBeeAddress64(0x0013A200, 0x4098DA06); // address of the receiver XBee  
ZBTxRequest zbTx = ZBTxRequest(addr64, payload, sizeof(payload));
ZBTxStatusResponse txStatus = ZBTxStatusResponse();

//Xbee receive details
XBeeResponse response   = XBeeResponse();
ZBRxResponse        rx  = ZBRxResponse();
ModemStatusResponse msr = ModemStatusResponse();

int temperatureGet;
float temperature;
long pressure;
int altitudeGet;
float altitude;
int magneticX;
int magneticY;
int magneticZ;
int magnetic;
int compassAz;
int compassAlt;
int humidityGet;
int humidity;

void setup() {
  //Serial setup
  Wire.begin();
  Serial.begin(9600);

  //xbee set up
  Serial2.begin(9600);
  xbee.setSerial(Serial2);

  //lcd setup
  lcd.init(); 
  lcd.clear();
  lcd.print("Hi");
}

///////////////////////////Main loop///////////////////////////////////////
void loop() {

  //**Joystick will read in the values and subsequently send it over to Satellite via xbee to control servos**
  Serial.println("Reading joystick values");
  
  joystickX = analogRead(joystickHorizontal);
  joystickY = analogRead(joystickVertical);

  if (joystickX >= 600)
  {
    stateX = 2;
  } 
  else 
  {
    if(joystickX <= 500)
    {
      stateX = 0;
    }
    else
    {
      stateX =1;
    }
  }
  
  if (joystickY >= 600)
  {
    stateY = 2;
  }
  else
  {
    if(joystickY <= 500)
    {
      stateY = 0;
    }
    else
    {
      stateY = 1;
    }
  }
  
Serial.println("StateX : ");
Serial.println(stateX);
Serial.println("StateY : ");
Serial.println(stateY);
Serial.println("JoystickX : ");
Serial.println(joystickX);
Serial.println("JoystickY : ");
Serial.println(joystickY);

  //Xbee sends joystick data to Satellite
   Xbee = stateY;
   payload[0] = Xbee >> 8 & 0xff;
   payload[1] = Xbee & 0xff;
   
   Xbee = stateX;
   payload[2] = Xbee >> 8 & 0xff;
   payload[3] = Xbee & 0xff;

   xbee.send(zbTx);
  
  //**Xbee receives sensors data from satellite**
  
   xbeerecievedata();
}

//Function for xbee to receive sensor data from satellite
void xbeerecievedata () {
  xbee.readPacket();

  if (xbee.getResponse().isAvailable())
  {
    if (xbee.getResponse().getApiId() == ZB_RX_RESPONSE) 
    {
      xbee.getResponse().getZBRxResponse(rx);

      if (rx.getOption() == ZB_PACKET_ACKNOWLEDGED) 
      {

      } 
      else 
      {
        
      }
      
      //Starts to unpack data received
      Serial.println("Xbee receives data");
      
      temperatureGet = rx.getData(0) << 8 | rx.getData(1);
      temperature = temperatureGet/100.00;
      unsigned char rxData[16];
      /* Testing purpose
      char print_rxdata[100];
      print_rxdata[0] = '\0';
      for(int i=0; i<16; i++)
      {
        rxData[i] = rx.getData(i);
        sprintf(print_rxdata+strlen(print_rxdata), "%d,", rxData[i]);
      }
      Serial.println(print_rxdata);
      */
      Serial.println("Temperature : ");
      Serial.println(temperature);

      pressure = (long) rxData[2] <<24 | (long) rxData[3] <<16 | (long) rxData[4] <<8 | (long) rxData[5];
      Serial.println("Pressure : ");
      Serial.println(pressure);
      
      altitudeGet = rxData[6] << 8 | rxData[7];
      altitude = altitudeGet/100.00;
      Serial.println("Altitude : ");
      Serial.println(altitude);
      
      magneticX = rxData[8] << 8 | rxData[9];
      magneticY = rxData[10] << 8 | rxData[11];
      magneticZ = rxData[12] << 8 | rxData[13];
     
      magnetic = sqrt(pow(magneticX, 2) + pow(magneticY, 2) + pow(magneticZ, 2));
      Serial.println("Magnetic : ");
      Serial.println(magnetic);
      
      compassAz = (atan(magneticX * 1.0 / magneticY))*180*7/22;
      compassAlt = (atan(magneticZ/(sqrt(sq(magneticX)+sq(magneticY)))))*180*7/22;
      Serial.println("CompassAz : ");
      Serial.println(compassAz);
      Serial.println("CompassAlt : ");
      Serial.println(compassAlt);
      
      humidityGet = rxData[14] << 8 | rxData[15];
      //humidity = (5000.0 / 31.0)*((humidityGet/1024.0) - 0.16);
      Serial.println("Humidity : ");
      Serial.println(humidityGet);
    }
  }
}
        
//Function for temperature sensor but we're not using this anymore, if it's connected on breadboard, remove        
/*void getTemp102 (){
  byte firstByte, secondByte;
  int value;
  float convertedTemp;

  Wire.beginTransmission(TMP102);
  Wire.write((byte)0x00);
  Wire.endTransmission();
  Wire.requestFrom(TMP102, 2);

  if(Wire.available() >=2){
    firstByte = (Wire.read());
    secondByte = (Wire.read());
  }
  value = ((firstByte) << 4);
  value |= ((secondByte) >>4);
  convertedTemp = value/16;
 
   Xbee send
   Xbee = stateY;
   payload[0] = Xbee >> 24 & 0xff;
   payload[1] = Xbee >> 16 & 0xff;
   payload[2] = Xbee >> 8 & 0xff;
   payload[3] = Xbee & 0xff;
   Xbee = stateX;
   payload[4] = Xbee >> 24 & 0xff;
   payload[5] = Xbee >> 16 & 0xff;
   payload[6] = Xbee >> 8 & 0xff;
   payload[7] = Xbee & 0xff;

   xbee.send(zbTx);
}*/
